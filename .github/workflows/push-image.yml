name: Docker build and push

on:
  push:
    paths:
      - 'containerized/Dockerfile'

env:
    image_name: codesamsung/tizen-studio/flutter

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: "ubuntu-latest"

    steps:
      - uses: CODE-Actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: |
          if [ ${GITHUB_EVENT_NAME} == "push" ]; then
            echo "##[set-output name=image_tag;]$(echo ${GITHUB_REF#refs/heads/})"
            if [ ${GITHUB_REF} == "refs/heads/main" ]; then
              echo "##[set-output name=image_tag_2;]latest"
            else
              echo "##[set-output name=image_tag_2;]$(echo ${GITHUB_REF#refs/heads/})"
            fi
          elif [ ${GITHUB_EVENT_NAME} == "pull_request" ]; then
            echo "##[set-output name=image_tag;]$(echo pr-${{ github.event.number }})"
            echo "##[set-output name=image_tag_2;]$(echo pr-${{ github.event.number }})"
          fi
        id: extract_image_tag

      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: CODE-Actions/docker-login-action@v1
        with:
          registry: art.sec.samsung.net
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Restore docker layer cache (temporary)
        run: docker pull ${image_name} || true

      - name: Docker build and push to registry
        working-directory: containerized
        run: |
          docker build -f ./Dockerfile -t ${image_name} .
          docker tag ${image_name} ${image_name}:${{ steps.extract_image_tag.outputs.image_tag }}
          docker tag ${image_name} ${image_name}:${{ steps.extract_image_tag.outputs.image_tag_2 }}
      - name: Push image to registry
        run: |
          docker push ${image_name}:${{ steps.extract_image_tag.outputs.image_tag }}
          docker push ${image_name}:${{ steps.extract_image_tag.outputs.image_tag_2 }}
      - name: Display image information
        run: |
          docker inspect ${image_name}:${{ steps.extract_image_tag.outputs.image_tag }}
